#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://mozilla.org/.
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is AOLserver Code and related documentation
# distributed by AOL.
# 
# The Initial Developer of the Original Code is America Online,
# Inc. Portions created by AOL are Copyright (C) 1999 America Online,
# Inc. All Rights Reserved.
#
# Alternatively, the contents of this file may be used under the terms
# of the GNU General Public License (the "GPL"), in which case the
# provisions of GPL are applicable instead of those above.  If you wish
# to allow use of your version of this file only under the terms of the
# GPL and not to allow others to use your version of this file under the
# License, indicate your decision by deleting the provisions above and
# replace them with the notice and other provisions required by the GPL.
# If you do not delete the provisions above, a recipient may use your
# version of this file under either the License or the GPL.
# 
#
# $Header$
#

package require tcltest 2.2
namespace import -force ::tcltest::*

eval ::tcltest::configure $argv



test loop-1.1 {Loops} -body {

	set l1 [llength [ns_loopctl loops]]

	foreach x l {
		set l2 [llength [ns_loopctl loops]]
	}

	expr {$l2 - $l1}

} -cleanup {
	unset -nocomplain l1 l2
} -result 1

test loop-1.2 {Threads} -body {
	llength [lsearch -all [ns_loopctl threads] [ns_thread id]]
} -result 1

test loop-1.3 {Loop info} -body {
	array set a [ns_loopctl info [lindex [ns_loopctl loops] 0]]
	lsort [array names a]
} -cleanup {
	unset -nocomplain a
} -result {command loopid spins start status threadid}

test loop-1.4 {Thread ID matches loop info} -body {
	foreach l [ns_loopctl loops] {
		array set a [ns_loopctl info $l]
		lappend tids $a(threadid)
	}
	expr {[llength [lsearch -all $tids [ns_thread id]]] > -1}
} -cleanup {
	unset -nocomplain a l tids
} -result 1

test loop-1.5 {Thread abort} -body {
	set tid [ns_thread begin {
		nsv_set . loop-1.5-threadid [ns_thread id]
		while {1} {
			ns_log notice loop-1.5: thread looping
			after 500
		}
	}]
	after 1000
	set ok [ns_loopctl abort [nsv_get . loop-1.5-threadid]]
	ns_thread join $tid

	set ok
} -cleanup {
	unset -nocomplain tid ok
} -result 1

test loop-1.6 {Loop cancel} -body {

	# kick off an endless loop.

	set tid [ns_thread begin {
		while {1} {
			ns_log notice loop-1.6: thread looping
			after 500
		}
	}]
	after 1000

	# search for the correct loop ID using unique string

	foreach l [ns_loopctl loops] {
		array set linfo [ns_loopctl info $l]
		if {[string match *loop-1.6* $linfo(command)]} {
			set lid $l
			break
		}
	}

	# if found, attempt to cancel it.

	if {![info exists lid]} {
		error "loop script not found"
	}

	set ok [ns_loopctl cancel $lid]
	ns_thread join $tid

	set ok

} -cleanup {
	unset -nocomplain tid ok l lid linfo
} -result 1

test loop-1.7 {Loop eval} -body {

	# kick off an endless loop.

	set tid [ns_thread begin {
		set doloop 1
		while {$doloop} {
			ns_log notice loop-1.7: thread looping
			after 500
		}
	}]
	after 1000

	# search for the correct loop ID using unique string

	foreach l [ns_loopctl loops] {
		array set linfo [ns_loopctl info $l]
		if {[string match *loop-1.7* $linfo(command)]} {
			set lid $l
			break
		}
	}

	# if found, send it some Tcl to evaluate

	if {![info exists lid]} {
		error "loop script not found"
	}

	set doloop [ns_loopctl eval $lid {
		ns_log notice "loop-1.7: eval script running"
		set doloop 0
	}]
	ns_thread join $tid

	set doloop

} -cleanup {
	unset -nocomplain tid doloop l lid linfo
} -result 0



cleanupTests
